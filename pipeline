pipeline {
    agent any
    environment {
        SCANNER_HOME = tool 'sonar-scanner' // SonarQube scanner tool configuration
    }
    options {
        skipStagesAfterUnstable() // Skip remaining stages if one fails
        timestamps() // Add timestamps to logs
        disableConcurrentBuilds() // Avoid conflicts in builds
    }

    stages {
        stage('Checkout Source Code') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[url: 'https://github.com/Yaqoob599/java-example.git']],
                    extensions: [[$class: 'CloneOption', noTags: false, shallow: false]]
                ])
            }
        }

        stage('Test') {
            steps {
                sh "mvn clean test" // Clean before testing
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-scanner') {
                    sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=Java-app \
                        -Dsonar.projectKey=Java-app \
                        -Dsonar.scm.provider=git \
                        -Dsonar.java.binaries=target/classes \
                        -Dsonar.verbose=true
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully."
        }
        failure {
            echo "Pipeline failed. Please check the logs for details."
        }
        always {
            cleanWs() // Clean workspace to avoid stale data
        }
    }
}
